@page "/Create"
@using SuggestionAppUI.Components
@using SuggestionAppUI.Models;
@inject ICategoryData categoryData
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager

<h1>Make A Suggestion</h1>

<div>
    <div>
        <div>
            <button @onclick="ClosePage"></button>
        </div>
        @if(categories is not null)
        {
            
        }
        <EditForm Model="suggestion" OnValidSubmit="CreateSuggestion">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label for="suggestion-text">Suggestion</label>
                <div>Focus on the topic or technology you want to learn about.</div>
                <InputText id="suggestion-text" @bind-Value="suggestion.Suggestion"/>
            </div>
                <label for="category">Category</label>
                <div>Choose one category.</div>
                <div>
                    <MyInputRadioGroup id="category" @bind-Value="suggestion.CategoryId">
                    @foreach(var c in categories)
                    {
                        <div>
                            <InputRadio Value="@c.Id" id="@c.Id" />
                            <label for="@c.Id">@c.Name - @c.Description</label>
                        </div>
                    }
                </MyInputRadioGroup>
                </div>
            <div>
                <label for="description">Suggestion</label>
                <div>Briefly describe your suggestion.</div>
                <InputTextArea id="description" @bind-Value="suggestion.Description" />
            </div>
            <div>
                <button type="submit">Suggest</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private CreateSuggestionModel suggestion = new();
    private List<CategoryModel> categories;
    private UserModel loggedInUser;


    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetCategoriesAsync();

        // TODO: replace with real user lookup
        loggedInUser = await userData.GetUserFromAuthentication("abc-123"); 
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task CreateSuggestion()
    {
        SuggestionModel s = new();
        s.Suggestion = suggestion.Suggestion;
        s.Description = suggestion.Description;
        s.Author = new BasicUserModel(loggedInUser);
        s.Category = categories.Where(c => c.Id == suggestion.CategoryId).FirstOrDefault();

        if(s.Category is null)
        {
            suggestion.CategoryId = "";
            return;
        }

        await suggestionData.CreateSuggestion(s);
        suggestion = new();
        ClosePage();
    }
}
